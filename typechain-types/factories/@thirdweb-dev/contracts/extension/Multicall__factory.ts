/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Multicall,
  MulticallInterface,
} from "../../../../@thirdweb-dev/contracts/extension/Multicall";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610655806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ac9650d814610030575b600080fd5b61004361003e366004610361565b610059565b6040516100509190610444565b60405180910390f35b60608167ffffffffffffffff811115610074576100746104c6565b6040519080825280602002602001820160405280156100a757816020015b60608152602001906001900390816100925790505b509050336000805b848110156101b657811561012e5761010c308787848181106100d3576100d36104f5565b90506020028101906100e59190610524565b866040516020016100f893929190610590565b6040516020818303038152906040526101bf565b84828151811061011e5761011e6104f5565b60200260200101819052506101ae565b61019030878784818110610144576101446104f5565b90506020028101906101569190610524565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101bf92505050565b8482815181106101a2576101a26104f5565b60200260200101819052505b6001016100af565b50505092915050565b60606101e483836040518060600160405280602781526020016105f9602791396101eb565b9392505050565b60606000808573ffffffffffffffffffffffffffffffffffffffff168560405161021591906105c9565b600060405180830381855af49150503d8060008114610250576040519150601f19603f3d011682016040523d82523d6000602084013e610255565b606091505b509150915061026686838387610270565b9695505050505050565b6060831561030b5782516000036103045773ffffffffffffffffffffffffffffffffffffffff85163b610304576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610315565b610315838361031d565b949350505050565b81511561032d5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb91906105e5565b6000806020838503121561037457600080fd5b823567ffffffffffffffff8082111561038c57600080fd5b818501915085601f8301126103a057600080fd5b8135818111156103af57600080fd5b8660208260051b85010111156103c457600080fd5b60209290920196919550909350505050565b60005b838110156103f15781810151838201526020016103d9565b50506000910152565b600081518084526104128160208601602086016103d6565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b828110156104b9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08886030184526104a78583516103fa565b9450928501929085019060010161046d565b5092979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261055957600080fd5b83018035915067ffffffffffffffff82111561057457600080fd5b60200191503681900382131561058957600080fd5b9250929050565b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b600082516105db8184602087016103d6565b9190910192915050565b6020815260006101e460208301846103fa56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209f1d1e766678959ea8cd107bbd6d71a3987fae4774f14815ca7409b8b69b886164736f6c63430008180033";

type MulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall__factory extends ContractFactory {
  constructor(...args: MulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Multicall & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Multicall__factory {
    return super.connect(runner) as Multicall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallInterface {
    return new Interface(_abi) as MulticallInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Multicall {
    return new Contract(address, _abi, runner) as unknown as Multicall;
  }
}
