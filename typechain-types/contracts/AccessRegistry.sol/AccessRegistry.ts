/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IAccessRegistry {
  export type AddFilterStruct = {
    pubkey: BytesLike;
    filter: AddressLike;
    r: BytesLike;
    s: BytesLike;
    message: BytesLike;
  };

  export type AddFilterStructOutput = [
    pubkey: string,
    filter: string,
    r: string,
    s: string,
    message: string
  ] & { pubkey: string; filter: string; r: string; s: string; message: string };
}

export interface AccessRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addFilter"
      | "getPrivateCastMembers"
      | "joinPrivateCast"
      | "owner"
      | "removePrivatCast"
      | "setOwner"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "addFilter",
    values: [IAccessRegistry.AddFilterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrivateCastMembers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPrivateCast",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePrivatCast",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addFilter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrivateCastMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinPrivateCast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePrivatCast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [prevOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [prevOwner: string, newOwner: string];
  export interface OutputObject {
    prevOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AccessRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): AccessRegistry;
  waitForDeployment(): Promise<this>;

  interface: AccessRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addFilter: TypedContractMethod<
    [f: IAccessRegistry.AddFilterStruct],
    [void],
    "nonpayable"
  >;

  getPrivateCastMembers: TypedContractMethod<
    [casthash: AddressLike],
    [string[]],
    "view"
  >;

  joinPrivateCast: TypedContractMethod<
    [casthash: AddressLike, pubkey: BytesLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removePrivatCast: TypedContractMethod<
    [casthash: AddressLike, pubkey: BytesLike],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addFilter"
  ): TypedContractMethod<
    [f: IAccessRegistry.AddFilterStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPrivateCastMembers"
  ): TypedContractMethod<[casthash: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "joinPrivateCast"
  ): TypedContractMethod<
    [casthash: AddressLike, pubkey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removePrivatCast"
  ): TypedContractMethod<
    [casthash: AddressLike, pubkey: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnerUpdated(address,address)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
  };
}
