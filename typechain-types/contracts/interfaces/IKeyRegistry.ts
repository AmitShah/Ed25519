/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IKeyRegistry {
  export type KeyDataStruct = { state: BigNumberish; keyType: BigNumberish };

  export type KeyDataStructOutput = [state: bigint, keyType: bigint] & {
    state: bigint;
    keyType: bigint;
  };
}

export interface IKeyRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "REMOVE_TYPEHASH"
      | "VERSION"
      | "keyAt"
      | "keyDataOf"
      | "keysOf(uint256,uint8)"
      | "keysOf(uint256,uint8,uint256,uint256)"
      | "totalKeys"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "REMOVE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "keyAt",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keyDataOf",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "keysOf(uint256,uint8)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keysOf(uint256,uint8,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalKeys",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "REMOVE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyDataOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keysOf(uint256,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keysOf(uint256,uint8,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalKeys", data: BytesLike): Result;
}

export interface IKeyRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IKeyRegistry;
  waitForDeployment(): Promise<this>;

  interface: IKeyRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  REMOVE_TYPEHASH: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  keyAt: TypedContractMethod<
    [fid: BigNumberish, state: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;

  keyDataOf: TypedContractMethod<
    [fid: BigNumberish, key: BytesLike],
    [IKeyRegistry.KeyDataStructOutput],
    "view"
  >;

  "keysOf(uint256,uint8)": TypedContractMethod<
    [fid: BigNumberish, state: BigNumberish],
    [string[]],
    "view"
  >;

  "keysOf(uint256,uint8,uint256,uint256)": TypedContractMethod<
    [
      fid: BigNumberish,
      state: BigNumberish,
      startIdx: BigNumberish,
      batchSize: BigNumberish
    ],
    [[string[], bigint] & { page: string[]; nextIdx: bigint }],
    "view"
  >;

  totalKeys: TypedContractMethod<
    [fid: BigNumberish, state: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "REMOVE_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "keyAt"
  ): TypedContractMethod<
    [fid: BigNumberish, state: BigNumberish, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "keyDataOf"
  ): TypedContractMethod<
    [fid: BigNumberish, key: BytesLike],
    [IKeyRegistry.KeyDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "keysOf(uint256,uint8)"
  ): TypedContractMethod<
    [fid: BigNumberish, state: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "keysOf(uint256,uint8,uint256,uint256)"
  ): TypedContractMethod<
    [
      fid: BigNumberish,
      state: BigNumberish,
      startIdx: BigNumberish,
      batchSize: BigNumberish
    ],
    [[string[], bigint] & { page: string[]; nextIdx: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalKeys"
  ): TypedContractMethod<
    [fid: BigNumberish, state: BigNumberish],
    [bigint],
    "view"
  >;

  filters: {};
}
