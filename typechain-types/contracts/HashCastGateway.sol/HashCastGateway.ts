/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IHashCastKarma {
  export type ClaimRequestStruct = {
    pubkey: BytesLike;
    r: BytesLike;
    s: BytesLike;
  };

  export type ClaimRequestStructOutput = [
    pubkey: string,
    r: string,
    s: string
  ] & { pubkey: string; r: string; s: string };

  export type TransferRequestStruct = {
    pubkey: BytesLike;
    to: AddressLike;
    value: BigNumberish;
    deadline: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type TransferRequestStructOutput = [
    pubkey: string,
    to: string,
    value: bigint,
    deadline: bigint,
    r: string,
    s: string
  ] & {
    pubkey: string;
    to: string;
    value: bigint;
    deadline: bigint;
    r: string;
    s: string;
  };
}

export interface HashCastGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "getVirtualAddress"
      | "karmaToken"
      | "nonces"
      | "owner"
      | "rewardPerBlock"
      | "setOwner"
      | "transferWithAuthorization"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [IHashCastKarma.ClaimRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getVirtualAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "karmaToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithAuthorization",
    values: [IHashCastKarma.TransferRequestStruct]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVirtualAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "karmaToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferWithAuthorization",
    data: BytesLike
  ): Result;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [prevOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [prevOwner: string, newOwner: string];
  export interface OutputObject {
    prevOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HashCastGateway extends BaseContract {
  connect(runner?: ContractRunner | null): HashCastGateway;
  waitForDeployment(): Promise<this>;

  interface: HashCastGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [c: IHashCastKarma.ClaimRequestStruct],
    [void],
    "nonpayable"
  >;

  getVirtualAddress: TypedContractMethod<[pubkey: BytesLike], [string], "view">;

  karmaToken: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rewardPerBlock: TypedContractMethod<[], [bigint], "view">;

  setOwner: TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;

  transferWithAuthorization: TypedContractMethod<
    [t: IHashCastKarma.TransferRequestStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [c: IHashCastKarma.ClaimRequestStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getVirtualAddress"
  ): TypedContractMethod<[pubkey: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "karmaToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardPerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferWithAuthorization"
  ): TypedContractMethod<
    [t: IHashCastKarma.TransferRequestStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;

  filters: {
    "OwnerUpdated(address,address)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
  };
}
